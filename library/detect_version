#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2016, Raphael Randschau <nicolai86@me.com>

DOCUMENTATION = '''
---
module: detect_version
short_description: This module collects basic version informations
options:
  executable:
    description:
      - alternate path to binary
  option:
    description:
      - alternate option argument name.
  pattern:
    description:
      - regexp detailing how to extract the proper version
'''

import os
import re

def locate_binary(module):
    executable_path = module.params['executable']
    if "/" not in executable_path:
        executable_path = module.get_bin_path(module.params['executable'], False, [])
    return executable_path

def get_version(binary_path, module):
    pattern = module.params['pattern']

    env_command = [binary_path, module.params['option']]

    proc = subprocess.Popen(env_command, stdout = subprocess.PIPE)
    output, err = proc.communicate()
    version = output.strip()

    m = re.match(pattern, version)
    return m.group(1)

def gather_facts(module):
    binary_path = locate_binary(module)
    binary_name = module.params['executable'].split('/')[-1]

    installed = False
    if binary_path:
        installed = os.path.exists(binary_path)

    version = None
    if installed:
        version = get_version(binary_path, module)

    facts = {}
    facts[binary_name] = {
        'installed': installed,
        'version': version
    }
    return facts

def main():
    module = AnsibleModule(argument_spec = dict(
            executable = dict(required=True),
            option = dict(required=True),
            pattern = dict(required=True)
        )
    )

    result = {
        'rc': 0,
        'changed': True,
        'ansible_facts': gather_facts(module)
    }

    module.exit_json(**result)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
